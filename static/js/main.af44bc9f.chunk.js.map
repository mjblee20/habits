{"version":3,"sources":["components/nav/NavBar.js","components/habit/HabitForm.js","components/habit/HabitList.js","pages/Habit.js","pages/Todo.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","to","Form","useState","newHabit","setNewHabit","oldHabit","setOldHabit","onSubmit","e","preventDefault","alert","axios","post","then","window","location","reload","catch","onChange","target","value","type","placeholder","HabitList","habits","setHabits","useEffect","get","err","console","log","data","length","map","habit","index","key","id","Habit","Todo","taskList","setTaskList","task","setTask","tasks","removeTask","delete","response","error","name","_id","onClick","Home","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUA8BeA,MAzBf,WACE,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,aACb,0BAAMA,UAAU,aACd,mCAGJ,yBAAKA,UAAU,YACb,4BACE,wBAAIA,UAAU,aACZ,kBAAC,IAAD,CAASC,GAAG,KAAZ,MAEF,wBAAID,UAAU,aACZ,kBAAC,IAAD,CAASC,GAAG,UAAZ,MAEF,wBAAID,UAAU,aACZ,kBAAC,IAAD,CAASC,GAAG,SAAZ,U,6BCqBGC,MAtCf,WAAiB,IAAD,EACkBC,mBAAS,IAD3B,mBACPC,EADO,KACGC,EADH,OAEkBF,mBAAS,IAF3B,mBAEPG,EAFO,KAEGC,EAFH,KA0Bd,OACE,yBAAKP,UAAU,wBACb,6CACA,0BAAMQ,SAzBS,SAACC,GAClBA,EAAEC,iBACe,KAAbN,GACFO,MAAM,kCAES,KAAbL,GACFK,MAAM,kCAERC,IACGC,KAAK,iDAAkD,CACtDP,SAAUA,EACVF,SAAUA,IAEXU,MAAK,WACJH,MAAM,8BACNI,OAAOC,SAASC,YAEjBC,OAAM,WACLP,MAAM,gDAQN,2BAAOQ,SAAU,SAACV,GAAD,OAAOJ,EAAYI,EAAEW,OAAOC,QAAQC,KAAK,OAAOC,YAAY,yBAC7E,2BAAOJ,SAAU,SAACV,GAAD,OAAOF,EAAYE,EAAEW,OAAOC,QAAQC,KAAK,OAAOC,YAAY,yBAC7E,2BAAOD,KAAK,c,MCALE,MAhCf,WAAsB,IAAD,EACSrB,mBAAS,MADlB,mBACZsB,EADY,KACJC,EADI,KASnB,OANAC,qBAAU,WACRf,IACGgB,IAAI,kDACJd,MAAK,SAACW,GAAD,OAAYC,EAAUD,MAC3BP,OAAM,SAACW,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAED,yBAAK7B,UAAU,wBACb,0DACY,OAAXyB,EACC,yCACyB,IAAvBA,EAAOO,KAAKC,OACd,iDAEA,oCACE,kDACA,4BACGR,EAAOO,KAAKE,KAAI,SAACC,EAAOC,GAAR,OACf,wBAAIC,IAAKD,EAAOE,GAAIH,EAAMG,IAA1B,aACaH,EAAM7B,SADnB,gBAC0C6B,EAAM/B,iB,MCA/CmC,MApBf,WACE,OACE,yBAAKvC,UAAU,mBACb,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,eAAd,mBAGF,yBAAKA,UAAU,wBAKb,kBAAC,EAAD,MAEA,kBAAC,EAAD,S,MC+EOwC,MA/Ff,WAAiB,IAAD,EACkBrC,mBAAS,MAD3B,mBACPsC,EADO,KACGC,EADH,OAEUvC,mBAAS,IAFnB,mBAEPwC,EAFO,KAEDC,EAFC,KAIdjB,qBAAU,WACRf,IACGgB,IAAI,iDACJd,MAAK,SAAC+B,GACLf,QAAQC,IAAIc,GACZH,EAAYG,MAEb3B,OAAM,SAACW,GACNC,QAAQC,IAAIF,QAEf,IAEH,IA0BMiB,EAAa,SAACrC,GAClBG,IACGmC,OAAO,uDAAyDtC,EAAEW,OAAOC,OACzEP,MAAK,SAAUkC,GACdlB,QAAQC,IAAIiB,GACZjC,OAAOC,SAASC,YAEjBC,OAAM,SAAU+B,GACfnB,QAAQC,IAAIkB,OAIlB,OACE,yBAAKjD,UAAU,kBACb,yBAAKA,UAAU,wBACb,2CAGF,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,uBACC,OAAbyC,EACC,yCAEA,4BACGA,EAAST,KAAKE,KAAI,SAACS,EAAMP,GACxB,OACE,wBAAIC,IAAKD,GAEP,8BAAOO,EAAKA,MAIZ,4BAAQrB,KAAK,SAAS4B,KAAK,aAAa7B,MAAOsB,EAAKQ,IAAKC,QAASN,GAAlE,WAUZ,yBAAK9C,UAAU,uBACb,0BAAMQ,SArEE,SAACC,GACfA,EAAEC,iBACFE,IACGC,KAAK,gDAAiD,CACrD8B,KAAMA,IAEP7B,MAAK,SAAUkC,GACdlB,QAAQC,IAAIiB,GACZjC,OAAOC,SAASC,YAEjBC,OAAM,SAAU+B,GACfnB,QAAQC,IAAIkB,QA2DR,2BAAO9B,SAAU,SAACV,GAAD,OAAOmC,EAAQnC,EAAEW,OAAOC,QAAQC,KAAK,OAAOC,YAAY,aACzE,2BAAOD,KAAK,gBC/ET+B,MARf,WACE,OACE,yBAAKrD,UAAU,kBACb,yDCeSsD,G,MAdH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWJ,IACvC,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWlB,IAChC,kBAAC,IAAD,CAAOiB,KAAK,QAAQC,UAAWjB,IAC/B,kBAAC,IAAD,CAAUvC,GAAG,gBCLDyD,QACW,cAA7B3C,OAAOC,SAAS2C,UAEe,UAA7B5C,OAAOC,SAAS2C,UAEhB5C,OAAOC,SAAS2C,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.af44bc9f.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './NavBar.css';\n\nfunction NavBar() {\n  return (\n    <div className='nav-bar'>\n      <div className='nav-brand'>\n        <span className='nav-icons'>\n          <h1>#</h1>\n        </span>\n      </div>\n      <div className='nav-list'>\n        <ul>\n          <li className='nav-icons'>\n            <NavLink to='/'>A</NavLink>\n          </li>\n          <li className='nav-icons'>\n            <NavLink to='/habit'>B</NavLink>\n          </li>\n          <li className='nav-icons'>\n            <NavLink to='/todo'>C</NavLink>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport './HabitForm.css';\n\nfunction Form() {\n  const [newHabit, setNewHabit] = useState('');\n  const [oldHabit, setOldHabit] = useState('');\n\n  const submitForm = (e) => {\n    e.preventDefault();\n    if (newHabit === '') {\n      alert('Please fill the newHabit field');\n    }\n    if (oldHabit === '') {\n      alert('Please fill the oldHabit field');\n    }\n    axios\n      .post('https://habit-server.herokuapp.com/api/habits/', {\n        oldHabit: oldHabit,\n        newHabit: newHabit,\n      })\n      .then(function () {\n        alert('Habit created successfully');\n        window.location.reload();\n      })\n      .catch(function () {\n        alert('Could not creat habit. Please try again');\n      });\n  };\n\n  return (\n    <div className='habit-form-container'>\n      <h1>Add New Habit</h1>\n      <form onSubmit={submitForm}>\n        <input onChange={(e) => setNewHabit(e.target.value)} type='text' placeholder='Enter your new habit' />\n        <input onChange={(e) => setOldHabit(e.target.value)} type='text' placeholder='Enter your old habit' />\n        <input type='submit' />\n      </form>\n    </div>\n  );\n}\n\nexport default Form;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './HabitList.css';\n\nfunction HabitList() {\n  const [habits, setHabits] = useState(null);\n\n  useEffect(() => {\n    axios\n      .get('https://habit-server.herokuapp.com/api/habits/')\n      .then((habits) => setHabits(habits))\n      .catch((err) => console.log(err));\n  }, []);\n  return (\n    <div className='habit-list-container'>\n      <h1>List of Habits In Progress</h1>\n      {habits === null ? (\n        <p>Loading...</p>\n      ) : habits.data.length === 0 ? (\n        <p>No habit available</p>\n      ) : (\n        <>\n          <h2>Current Habit List</h2>\n          <ol>\n            {habits.data.map((habit, index) => (\n              <li key={index} id={habit.id}>\n                oldHabit: {habit.oldHabit} - newHabit: {habit.newHabit}\n              </li>\n            ))}\n          </ol>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default HabitList;\n","import React from 'react';\n\nimport HabitForm from '../components/habit/HabitForm';\nimport HabitList from '../components/habit/HabitList';\n\nimport './Habit.css';\n\nfunction Habit() {\n  return (\n    <div className='habit-container'>\n      <div className='habit-title-container'>\n        <h1 className='habit-title'> Habit Builder</h1>\n      </div>\n\n      <div className='habit-body-container'>\n        {/* TODO: Habit Score List */}\n        {/* TODO: Habit implementation intentions/goals */}\n\n        {/* TODO: Little pop tips on making better goals for changing a habit */}\n        <HabitList />\n\n        <HabitForm />\n      </div>\n    </div>\n  );\n}\n\nexport default Habit;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './Todo.css';\n\nfunction Todo() {\n  const [taskList, setTaskList] = useState(null);\n  const [task, setTask] = useState('');\n\n  useEffect(() => {\n    axios\n      .get('https://habit-server.herokuapp.com/api/todos/')\n      .then((tasks) => {\n        console.log(tasks);\n        setTaskList(tasks);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const addTask = (e) => {\n    e.preventDefault();\n    axios\n      .post('https://habit-server.herokuapp.com/api/todos/', {\n        task: task,\n      })\n      .then(function (response) {\n        console.log(response);\n        window.location.reload();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const updateTask = (e) => {\n    axios\n      .put('https://habit-server.herokuapp.com/api/todos/update/' + e.target.value)\n      .then((response) => {\n        console.log(response);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const removeTask = (e) => {\n    axios\n      .delete('https://habit-server.herokuapp.com/api/todos/delete/' + e.target.value)\n      .then(function (response) {\n        console.log(response);\n        window.location.reload();\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  return (\n    <div className='todo-container'>\n      <div className='todo-title-container'>\n        <h1>To-Do List</h1>\n      </div>\n\n      <div className='todo-body-container'>\n        <div className='task-list-container'>\n          {taskList === null ? (\n            <p>Loading...</p>\n          ) : (\n            <ul>\n              {taskList.data.map((task, index) => {\n                return (\n                  <li key={index}>\n                    {/* <input type='text' onChange={(e) => setTask(e.target.value)} value={task.task} /> */}\n                    <span>{task.task}</span>\n                    {/* <button type='submit' name='update-btn' value={task._id} onClick={updateTask}>\n                      Edit\n                    </button> */}\n                    <button type='submit' name='delete-btn' value={task._id} onClick={removeTask}>\n                      X\n                    </button>\n                  </li>\n                );\n              })}\n            </ul>\n          )}\n        </div>\n\n        <div className='task-form-container'>\n          <form onSubmit={addTask}>\n            <input onChange={(e) => setTask(e.target.value)} type='text' placeholder='New Task' />\n            <input type='submit' />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Todo;\n","import React from 'react';\n\nimport Habit from './Habit';\nimport Todo from './Todo';\n\nfunction Home() {\n  return (\n    <div className='home-container'>\n      <h1>Welcome To HabitBuilder</h1>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\n\nimport NavBar from './components/nav/NavBar';\nimport Habit from './pages/Habit';\nimport Todo from './pages/Todo';\nimport Home from './pages/Home';\nimport './App.css';\n\nconst App = function () {\n  return (\n    <Router>\n      <NavBar />\n      <Switch>\n        <Route exact path='/habits' component={Home} />\n        <Route path='/habit' component={Habit} />\n        <Route path='/todo' component={Todo} />\n        <Redirect to='/habits' />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}